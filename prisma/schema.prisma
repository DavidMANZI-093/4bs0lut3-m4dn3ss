// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. Ticketing System
model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String
  status      TicketStatus @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tickets")
}

enum TicketStatus {
  OPEN
  CLOSED
}

// 2. Basketball Scoreboard
model Score {
  id     String @id @default(cuid())
  teamA  Int    @default(0)
  teamB  Int    @default(0)
  updatedAt DateTime @updatedAt

  @@map("scores")
}

// 3. E-commerce System
model Product {
  id       String @id @default(cuid())
  name     String
  price    Float
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  cartItems CartItem[]

  @@map("products")
}

model CartItem {
  id        String @id @default(cuid())
  productId String
  quantity  Int    @default(1)
  createdAt DateTime @default(now())
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

// 4. Subscription System
model Subscriber {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("subscribers")
}

// 5. Live Stream Chat
model Message {
  id        String   @id @default(cuid())
  sender    String
  content   String
  createdAt DateTime @default(now())

  @@map("messages")
}

// 6. Authentication System
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         UserRole @default(ADMIN)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  lastLogin    DateTime?
  
  sessions Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  DEVELOPER
}

// 7. Membership System
model MembershipTier {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String
  benefits    String[]
  isPopular   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  members Member[]

  @@map("membership_tiers")
}

model Member {
  id        String       @id @default(cuid())
  email     String
  tierId    String
  status    MemberStatus @default(ACTIVE)
  joinedAt  DateTime     @default(now())
  expiresAt DateTime
  
  tier MembershipTier @relation(fields: [tierId], references: [id], onDelete: Cascade)

  @@map("members")
}

enum MemberStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}