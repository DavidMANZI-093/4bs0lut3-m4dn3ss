// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. Ticketing System
model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String
  status      TicketStatus @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tickets")
}

enum TicketStatus {
  OPEN
  CLOSED
}

// 2. Basketball Scoreboard
model Score {
  id     String @id @default(cuid())
  teamA  Int    @default(0)
  teamB  Int    @default(0)
  updatedAt DateTime @updatedAt

  @@map("scores")
}

// 3. E-commerce System
model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  inventory   Int     @default(0)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model CartItem {
  id        String @id @default(cuid())
  productId String
  quantity  Int    @default(1)
  createdAt DateTime @default(now())
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

// 4. Subscription System
model Subscriber {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("subscribers")
}

// 5. Live Stream Chat
model Message {
  id        String   @id @default(cuid())
  sender    String
  content   String
  createdAt DateTime @default(now())

  @@map("messages")
}

// 6. Enhanced Authentication System
model User {
  id           String       @id @default(cuid())
  email        String       @unique
  passwordHash String
  role         UserRole     @default(ADMIN)
  permissions  String[]     @default([])
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  lastLogin    DateTime?
  updatedAt    DateTime     @updatedAt
  
  sessions    Session[]
  auditLogs   AuditLog[]
  payments    Payment[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  DEVELOPER
  USER
}

// 7. Enhanced Membership System
model MembershipTier {
  id          String   @id @default(cuid())
  name        String   @unique
  price       Float
  duration    Int      // duration in months
  description String
  benefits    String[]
  isActive    Boolean  @default(true)
  isPopular   Boolean  @default(false)
  maxMembers  Int?     // optional limit on number of members
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  members Member[]

  @@map("membership_tiers")
}

model Member {
  id            String       @id @default(cuid())
  email         String
  tierId        String
  tierName      String       // denormalized for easier queries
  status        MemberStatus @default(ACTIVE)
  purchaseDate  DateTime     @default(now())
  expiryDate    DateTime
  paymentStatus PaymentStatus @default(PENDING)
  benefits      String[]     @default([])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  tier     MembershipTier @relation(fields: [tierId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("members")
}

enum MemberStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

// 8. Payment Processing System
model Payment {
  id            String        @id @default(cuid())
  userId        String?       // optional - for guest purchases
  memberId      String?       // for membership payments
  orderId       String?       // for product orders
  ticketId      String?       // for ticket purchases
  amount        Float
  currency      String        @default("USD")
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?       // external payment processor transaction ID
  processorData Json?         // additional data from payment processor
  failureReason String?       // reason for failed payments
  processedAt   DateTime?
  refundedAt    DateTime?
  refundAmount  Float?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  user         User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  member       Member? @relation(fields: [memberId], references: [id], onDelete: SetNull)
  transactions Transaction[]

  @@map("payments")
}

model Transaction {
  id          String            @id @default(cuid())
  paymentId   String
  type        TransactionType
  amount      Float
  status      TransactionStatus @default(PENDING)
  reference   String?           // external reference number
  description String?
  metadata    Json?             // additional transaction data
  processedAt DateTime?
  createdAt   DateTime          @default(now())
  
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

enum PaymentMethod {
  CARD
  PAYPAL
  BANK_TRANSFER
  CASH
  OTHER
}

enum TransactionType {
  CHARGE
  REFUND
  PARTIAL_REFUND
  CHARGEBACK
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// 9. Audit Logging System
model AuditLog {
  id          String     @id @default(cuid())
  userId      String?    // user who performed the action
  action      String     // action performed (e.g., "CREATE_USER", "UPDATE_PRODUCT")
  resource    String     // resource affected (e.g., "User", "Product", "Ticket")
  resourceId  String?    // ID of the affected resource
  oldValues   Json?      // previous values (for updates)
  newValues   Json?      // new values (for creates/updates)
  metadata    Json?      // additional context data
  ipAddress   String?    // IP address of the user
  userAgent   String?    // user agent string
  severity    LogSeverity @default(INFO)
  system      String     // which system generated the log
  createdAt   DateTime   @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([system])
  @@map("audit_logs")
}

enum LogSeverity {
  DEBUG
  INFO
  WARN
  ERROR
  CRITICAL
}

// 10. Enhanced Game/Scoreboard System
model Game {
  id        String     @id @default(cuid())
  homeTeam  String
  awayTeam  String
  homeScore Int        @default(0)
  awayScore Int        @default(0)
  status    GameStatus @default(SCHEDULED)
  startTime DateTime
  endTime   DateTime?
  venue     String?
  season    String?
  createdBy String?    // user who created the game
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("games")
}

enum GameStatus {
  SCHEDULED
  LIVE
  HALFTIME
  FINISHED
  CANCELLED
  POSTPONED
}

// 11. Enhanced Ticketing System
model TicketType {
  id                String   @id @default(cuid())
  gameId            String?  // optional - for general admission tickets
  name              String
  description       String?
  price             Float
  totalQuantity     Int
  availableQuantity Int
  seatSection       String?
  benefits          String[] @default([])
  isActive          Boolean  @default(true)
  saleStartDate     DateTime?
  saleEndDate       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  ticketPurchases TicketPurchase[]

  @@map("ticket_types")
}

model TicketPurchase {
  id           String   @id @default(cuid())
  ticketTypeId String
  customerName String
  customerEmail String
  quantity     Int      @default(1)
  totalAmount  Float
  paymentId    String?  // link to payment record
  status       TicketPurchaseStatus @default(PENDING)
  confirmationCode String @unique
  purchaseDate DateTime @default(now())
  
  ticketType TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)

  @@map("ticket_purchases")
}

enum TicketPurchaseStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
  USED
}

// 12. Enhanced Product/Order System
model Order {
  id              String      @id @default(cuid())
  customerName    String
  customerEmail   String
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  paymentId       String?     // link to payment record
  shippingAddress Json?       // shipping address as JSON
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Float  // price at time of purchase
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model LiveStream {
  id          String   @id @default(cuid())
  youtubeUrl  String?
  isActive    Boolean  @default(false)
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("live_streams")
}